name: 🔧 Fix 500 Error

on:
  workflow_dispatch:  # Manual trigger only
  
jobs:
  fix:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Apply 500 Error Fixes
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST || '4.240.101.137' }}
        username: ${{ secrets.USERNAME || 'azureuser' }}  
        key: ${{ secrets.SSH_KEY }}
        port: 22
        command_timeout: 15m
        script: |
          cd /home/azureuser/Omyra-Project_Management
          
          echo "🔧 APPLYING 500 ERROR FIXES"
          echo "============================"
          
          # Pull latest changes
          git pull origin main || echo "Git pull failed"
          
          # Fix 1: Clean Docker environment
          echo "🧹 Cleaning Docker environment..."
          docker system prune -f || echo "Docker prune failed"
          
          # Fix 2: Stop all containers completely
          echo "🛑 Stopping all containers..."
          docker compose -f docker-compose.production.yml down --volumes || echo "Stop failed"
          
          # Fix 3: Verify and recreate environment file
          echo "📝 Recreating environment file..."
          cat > .env << 'EOF'
          MONGODB_URI=mongodb://mongodb:27017/omyra-project-nexus
          JWT_SECRET=${{ secrets.JWT_SECRET || 'fallback-jwt-secret-12345' }}
          JWT_EXPIRES_IN=7d
          PORT=5000
          NODE_ENV=production
          FRONTEND_URL=http://pms.omyratech.com
          EMAIL_HOST=smtp.gmail.com
          EMAIL_PORT=587
          EMAIL_SECURE=true
          EMAIL_USER=test@example.com
          EMAIL_PASSWORD=temp-password
          EMAIL_FROM=noreply@pms.omyratech.com
          EMAIL_DEV_MODE=true
          EOF
          
          echo "✅ Environment file created"
          cat .env
          
          # Fix 4: Ensure SSL certificates exist
          echo "🔒 Ensuring SSL certificates..."
          mkdir -p ssl/certs
          if [ ! -f "ssl/certs/server.key" ] || [ ! -f "ssl/certs/server.crt" ]; then
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout ssl/certs/server.key \
              -out ssl/certs/server.crt \
              -subj "/C=US/ST=State/L=City/O=Organization/CN=pms.omyratech.com" \
              -addext "subjectAltName=DNS:pms.omyratech.com,DNS:www.pms.omyratech.com,DNS:localhost,IP:127.0.0.1" || echo "SSL generation failed"
          fi
          chmod 600 ssl/certs/server.key
          chmod 644 ssl/certs/server.crt
          echo "✅ SSL certificates ready"
          
          # Fix 5: Use simplified HTTP-only nginx config temporarily
          echo "🌐 Using simplified nginx configuration..."
          cat > nginx/nginx-simple.conf << 'EOF'
          events {
              worker_connections 1024;
          }
          
          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;
              
              # Logging
              access_log /var/log/nginx/access.log;
              error_log /var/log/nginx/error.log warn;
              
              # Upstream definitions
              upstream backend {
                  server backend:5000;
              }
              
              upstream frontend {
                  server frontend:80;
              }
              
              # HTTP Server only (simplified)
              server {
                  listen 80;
                  server_name pms.omyratech.com _;
                  
                  # Root path - serve frontend
                  location / {
                      proxy_pass http://frontend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      
                      # Error handling
                      proxy_connect_timeout 30s;
                      proxy_send_timeout 30s;
                      proxy_read_timeout 30s;
                  }
                  
                  # API routes
                  location /api/ {
                      proxy_pass http://backend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                  }
                  
                  # Health check
                  location /health {
                      proxy_pass http://backend/health;
                      proxy_set_header Host $host;
                  }
              }
          }
          EOF
          
          # Copy simple config over main config
          cp nginx/nginx-simple.conf nginx/nginx-ssl.conf
          echo "✅ Simplified nginx config applied"
          
          # Fix 6: Rebuild and restart with verbose logging
          echo "🏗️ Rebuilding containers..."
          docker compose -f docker-compose.production.yml build --no-cache
          
          echo "🚀 Starting containers with simplified config..."
          docker compose -f docker-compose.production.yml up -d
          
          # Fix 7: Wait and monitor startup
          echo "⏱️ Waiting for containers to start..."
          sleep 60
          
          echo "📊 Container status:"
          docker ps
          
          echo "🧪 Testing services..."
          
          # Test backend directly
          echo "Backend health test:"
          docker exec $(docker ps -q -f name=backend) curl -f http://localhost:5000/health || echo "Backend health failed"
          
          # Test frontend directly  
          echo "Frontend test:"
          docker exec $(docker ps -q -f name=frontend) curl -I http://localhost || echo "Frontend failed"
          
          # Test nginx config
          echo "Nginx config test:"
          docker exec $(docker ps -q -f name=nginx) nginx -t || echo "Nginx config failed"
          
          # Test external access
          echo "External access test:"
          curl -I http://localhost || echo "External access failed"
          
          echo "🎉 Fix attempt completed!"
          echo "Test: http://pms.omyratech.com"
